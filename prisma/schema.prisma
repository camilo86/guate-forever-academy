generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  players       Player[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Player {
  id             String   @id @default(cuid())
  name           String
  birthday       DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  clubId         String?
  subscriptionId String?
  invites        Invite[]

  user User  @relation(fields: [userId], references: [id], onDelete: NoAction)
  club Club? @relation(fields: [clubId], references: [id], onDelete: SetNull)
}

model Club {
  id                String   @id @default(cuid())
  name              String
  stripePaymentLink String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  players           Player[]
  invites           Invite[]
}

model Invite {
  id          String   @id @default(cuid())
  title       String
  description String
  playerId    String
  clubId      String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  club   Club   @relation(fields: [clubId], references: [id], onDelete: Cascade)
}
